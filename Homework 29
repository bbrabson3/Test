/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package animatedfill;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.StackPane;
import javafx.stage.Stage;

/**
 *
 * @author heathernew
 */
public class AnimatedFill extends Application {
    int N, M, size = 50;
    int[][] maze;
    int[][] solution;
    StackPane[][] pane;
    String borderColor = "-fx-border-color: black;";
    String fillColor = "-fx-background-color: red;";
    String borderWidth = "-fx-border-width: ";
    
    @Override
    public void start(Stage primaryStage) throws FileNotFoundException, IOException {
        
        BufferedReader in = new BufferedReader(new FileReader("maze1.txt"));
        StringTokenizer st = new StringTokenizer(in.readLine());
        N = Integer.parseInt(st.nextToken());
        M = Integer.parseInt(st.nextToken());
        maze = new int[N][M];
        pane = new StackPane[N][M];
        solution = new int[N][M];
        GridPane root = new GridPane();
        
        for(int i = 0; i < N; i++){
            st = new StringTokenizer(in.readLine());
            for (int j = 0; j < M; j++){
                solution[i][j] = -1;
                maze[i][j] = Integer.parseInt(st.nextToken());
                pane[i][j] = new StackPane();
                pane[i][j].setPrefSize(size, size);
                String top = ((maze[i][j] & 8) == 8) ? "3 " : "0 ";
                String right = ((maze[i][j] & 4) == 4) ? "3 " : "0 ";
                String bottom = ((maze[i][j] & 2) == 2) ? "3 " : "0 ";
                String left = ((maze[i][j] & 1) == 1) ? "3;" : "0;";
                pane[i][j].setStyle(borderColor + borderWidth + top + right + bottom + left);
                root.add(pane[i][j], j, i);
            }
        }
        
        Scene scene = new Scene(root);
        primaryStage.setTitle("xXX_Flood Fill_XXx");
        primaryStage.setScene(scene);
        primaryStage.show();
        primaryStage.setOnCloseRequest(e -> {
            System.exit(0);
            Platform.exit();
        });
        
        new Thread(() -> {
            try {
                Cell startCell = new Cell(0,0);
                Cell endCell = new Cell(N - 1,M - 1);
                fill(new Cell(0,0));
                showPath(endCell);
            } catch (InterruptedException ex) {}
        }).start();
    }
    
    public static void main(String[] args) {
        launch(args);
    }
    
    void showPath(Cell to) throws InterruptedException {
        String pathColor = "-fx-background-color: purple;";
        ArrayList<Cell> path = new ArrayList<>();
        while(solution[to.i][to.j] != 0){
            path.add(to);
            
            if(to.i + 1 < N && solution[to.i][to.j] - 1 == solution[to.i + 1][to.j]){
                path.add(new Cell(to.i + 1, to.j));
                to = new Cell(to.i + 1, to.j);
            }
            
            if(to.i > 0 && solution[to.i][to.j] - 1 == solution[to.i - 1][to.j]){
                path.add(new Cell(to.i - 1, to.j));
                to = new Cell(to.i - 1, to.j);
            }
            
            if(to.j + 1 < M && solution[to.i][to.j] - 1 == solution[to.i][to.j + 1]){
                path.add(new Cell(to.i, to.j + 1));
                to = new Cell(to.i, to.j + 1);
            }
            
            if(to.j > 0 && solution[to.i][to.j] - 1 == solution[to.i][to.j - 1]){
                path.add(new Cell(to.i, to.j - 1));
                to = new Cell(to.i, to.j - 1);
            }
        }
        
        for(int k = path.size() - 1; k >= 0; k--){
            Cell c = path.get(k);
            Thread.sleep(200);
            pane[c.i][c.j].setStyle(pane[c.i][c.j].getStyle() + pathColor);
        }
    }
    
    void fill(Cell startCell) throws InterruptedException {
        int[] di = {-1, 0, 1, 0};
        int[] dj = {0,1,0,-1};
        int[] bin = {8,4,2,1};
        
        Queue<Cell> queue = new LinkedList<>();
        solution[startCell.i][startCell.j] = 0;
        queue.add(startCell);
        while(!queue.isEmpty()){
            Cell from = queue.poll();
            pane[from.i][from.j].setStyle(
                pane[from.i][from.j].getStyle() + fillColor);
        Thread.sleep(100);
            for (int dir = 0; dir < 4; dir++) {
                if((maze[from.i][from.j] & bin[dir]) != bin[dir] && 
                        solution[from.i + di[dir]][from.j + dj[dir]] == -1){
                    // mark the distance
                    solution[from.i + di[dir]][from.j + dj[dir]] =
                            solution[from.i][from.j] + 1;
                    // add new cell to queue
                    queue.offer(new Cell(from.i + di[dir], from.j + dj[dir]));
                    
                }
            }
        }
    }
}

class Cell {
    int i, j;
    Cell(int i, int j){
        this.i = i;
        this.j = j;
    }
}
