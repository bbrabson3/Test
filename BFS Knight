import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class BFSKnight {
	static int[][] a = {{-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1}, 
						{-1, -1, -1, -1, -1, -1, -1, -1},
						{-1, -1, -1, -1, -1, -1, -1, -1}};
	static char[][] a2 = {
			{'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'}, 
			{'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},
			{'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'}, 
			{'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'}, 
			{'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},  
			{'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},  
			{'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'},
			{'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'}
			};

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int i = in.nextInt();
		int j = in.nextInt();
		int k = in.nextInt();
		int l = in.nextInt();
		System.out.println();
		printPath(new Cell(i, j), new Cell(k, l));
		System.out.println();
		System.out.println();
		printArr();
	}
	
	static void printArr() {
		for (char[] i: a2) {
			for (char j: i)
				System.out.print(j + " ");
			System.out.println();
		}
	}
	
	static void printPath(Cell from, Cell to) {
		a2[from.i][from.j] = '0';
		shortestPath(to.i, to.j);
		int count = 0;
		while (to.i != from.i || to.j != from.j) {
			System.out.print("(" + from.i + "," + from.j + ") -> ");
			Cell next = new Cell(from.i, from.j);
			
			if (from.i - 1 > 0 && from.j < a[0].length - 1 && a[from.i - 2][from.j + 1] >= 0)
				next = new Cell(from.i - 2, from.j + 1);
			if (from.i - 1 > 0 && from.j > 0 && a[from.i - 2][from.j - 1] >= 0)
				next = new Cell(from.i - 2, from.j - 1);
			
			if (from.i < a.length - 2 && from.j < a[0].length && a[from.i + 2][from.j + 1] >= 0) {
				if (a[next.i][next.j] > a[from.i + 2][from.j + 1])
					next = new Cell(from.i + 2, from.j + 1);
			}
			if (from.i < a.length - 2 && from.j > 0 && a[from.i + 2][from.j - 1] >= 0) {
				if (a[next.i][next.j] > a[from.i + 2][from.j - 1])
					next = new Cell(from.i + 2, from.j - 1);
			}
			
			if (from.j > 1 && from.i < a.length - 1 && a[from.i + 1][from.j - 2] >= 0) {
				if (a[next.i][next.j] > a[from.i + 1][from.j - 2])
					next = new Cell(from.i + 1, from.j - 2);
			}
			if (from.j > 1 && from.i > 0 && a[from.i - 1][from.j - 2] >= 0) {
				if (a[next.i][next.j] > a[from.i - 1][from.j - 2])
					next = new Cell(from.i - 1, from.j - 2);
			}
			
			if (from.j < a[0].length - 2 && from.i < a.length - 1 && a[from.i + 1][from.j + 2] >= 0) {
				if (a[next.i][next.j] > a[from.i + 1][from.j + 2])
					next = new Cell(from.i + 1, from.j + 2);
			}
			if (from.j < a[0].length - 2 && from.i > 0 && a[from.i - 1][from.j + 2] >= 0) {
				if (a[next.i][next.j] > a[from.i - 1][from.j + 2])
					next = new Cell(from.i - 1, from.j + 2);
			}
			from = next;
			count++;
			char count2 = (char)(count + '0');
			a2[from.i][from.j] = count2;
		}
		System.out.print("(" + to.i + "," + to.j + ")");
		
	}
	
	static void shortestPath(int startI, int startJ) {
		Queue<Cell> queue = new LinkedList<>();
		queue.offer(new Cell(startI, startJ));
		a[startI][startJ] = 0;
		while (!queue.isEmpty()) {
			Cell from = queue.poll();
			
			if (from.i > 1 && from.j < a[0].length - 1 && a[from.i - 2][from.j + 1] == -1) {
				a[from.i - 2][from.j + 1] = a[from.i][from.j] + 1;
				queue.offer(new Cell(from.i - 2, from.j + 1));
			}
			
			if (from.i > 1 && from.j > 0 && a[from.i - 2][from.j - 1] == -1) {
				a[from.i - 2][from.j - 1] = a[from.i][from.j] + 1;
				queue.offer(new Cell(from.i - 2, from.j - 1));
			}
			
			if (from.i < a.length - 2 && from.j < a[0].length - 1 && a[from.i + 2][from.j + 1] == -1) {
				a[from.i + 2][from.j + 1] = a[from.i][from.j] + 1;
				queue.offer(new Cell(from.i + 2, from.j + 1));
			}
			
			if (from.i < a.length - 2 && from.j > 0 && a[from.i + 2][from.j - 1] == -1) {
				a[from.i + 2][from.j - 1] = a[from.i][from.j] + 1;
				queue.offer(new Cell(from.i + 2, from.j - 1));
			}
			
			if (from.j > 1 && from.i < a.length - 1 && a[from.i + 1][from.j - 2] == -1) {
				a[from.i + 1][from.j - 2] = a[from.i][from.j] + 1;
				queue.offer(new Cell(from.i + 1, from.j - 2));
			}
			
			if (from.j > 1 && from.i > 0 && a[from.i - 1][from.j - 2] == -1) {
				a[from.i - 1][from.j - 2] = a[from.i][from.j] + 1;
				queue.offer(new Cell(from.i - 1, from.j - 2));
			}
			
			if (from.j < a[0].length - 2 && from.i < a.length - 1 && a[from.i + 1][from.j + 2] == -1) {
				a[from.i + 1][from.j + 2] = a[from.i][from.j] + 1;
				queue.offer(new Cell(from.i + 1, from.j + 2));
			}
			
			if (from.j < a[0].length - 2 && from.i > 0 && a[from.i - 1][from.j + 2] == -1) {
				a[from.i - 1][from.j + 2] = a[from.i][from.j] + 1;
				queue.offer(new Cell(from.i - 1, from.j + 2));
			}
		}
	}

	static class Cell {
		int i, j;
		Cell(int i, int j) { this.i = i; this.j = j; }
	}
}
