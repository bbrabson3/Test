/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fractal;

import java.util.ArrayList;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Point2D;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.shape.Line;
import javafx.stage.Stage;

/**
 *
 * @author heathernew
 */
public class Fractal extends Application {
    ArrayList<Line> list = new ArrayList<>();
    @Override
    public void start(Stage primaryStage) {
        Pane root = new Pane();
        
        TextField tf = new TextField();
        root.getChildren().add(tf);
        
        Scene scene = new Scene(root, 400, 400);
        primaryStage.setScene(scene);
        primaryStage.show();
        
        
        
        tf.setOnKeyPressed(e -> {
            int depth = 0;
            switch (e.getCode()) {
                case ENTER:
                    root.getChildren().removeAll(list);
                    depth = Integer.parseInt(tf.getText());
                    Point2D p1 = new Point2D(72, 200);
                    Point2D p2 = new Point2D(328, 200);
                    display(p1, p2, depth, root, 0);
                    Line line = new Line(p1.getX(), p1.getY(), p2.getX(), p2.getY());
                    root.getChildren().add(line);
                    break;
            }
        });
                    
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }
    
    public double length(Line line){
        double x1 = line.getStartX();
        double x2 = line.getEndX();
        double y1 = line.getStartY();
        double y2 = line.getEndY();
        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
    }
    
    
    public void display(Point2D p1, Point2D p2, int depth, Pane root, int count){
        
        if(depth == 0){
            if(count % 2 == 0){
                Line line = new Line(p1.getX(), p1.getY(), p2.getX(), p2.getY());
                double n = length(line);
                Line l1 = new Line(p1.getX() + n/4, p1.getY(), p1.getX() - n/4, p1.getY());
                Line l2 = new Line(p2.getX() + n/4, p2.getY(), p2.getX() - n/4, p2.getY());
                list.add(l1);
                list.add(l2);
                root.getChildren().add(l1);
                root.getChildren().add(l2);
            }
            else{
                Line line = new Line(p1.getX(), p1.getY(), p2.getX(), p2.getY());
                double n = length(line);
                Line l1 = new Line(p1.getX(), p1.getY() + n/4, p1.getX(), p1.getY() - n/4);
                Line l2 = new Line(p2.getX(), p2.getY() + n/4, p2.getX(), p2.getY() - n/4);
                list.add(l1);
                list.add(l2);
                root.getChildren().add(l1);
                root.getChildren().add(l2);
            }
        }
        
        else{
            if(count % 2 == 1){
                Line line = new Line(p1.getX(), p1.getY(), p2.getX(), p2.getY());
                double n = length(line);
                Line l1 = new Line(p1.getX() + n/4, p1.getY(), p1.getX() - n/4, p1.getY());
                Line l2 = new Line(p2.getX() + n/4, p2.getY(), p2.getX() - n/4, p2.getY());
                list.add(l1);
                list.add(l2);
                root.getChildren().add(l1);
                root.getChildren().add(l2);
                Point2D a = new Point2D(p1.getX() + n/4, p1.getY());
                Point2D b = new Point2D(p1.getX() - n/4, p1.getY());
                Point2D c = new Point2D(p2.getX() + n/4, p2.getY());
                Point2D d = new Point2D(p2.getX() - n/4, p2.getY());
                count += 1;
                display(a, b, depth - 1, root, count);
                display(c, d, depth - 1, root, count);
            }
            else{
                Line line = new Line(p1.getX(), p1.getY(), p2.getX(), p2.getY());
                double n = length(line);
                Line l1 = new Line(p1.getX(), p1.getY() + n/4, p1.getX(), p1.getY() - n/4);
                Line l2 = new Line(p2.getX(), p2.getY() + n/4, p2.getX(), p2.getY() - n/4);
                list.add(l1);
                list.add(l2);
                root.getChildren().add(l1);
                root.getChildren().add(l2);
                Point2D a = new Point2D(p1.getX(), p1.getY() + n/4);
                Point2D b = new Point2D(p1.getX(), p1.getY() - n/4);
                Point2D c = new Point2D(p2.getX(), p2.getY() + n/4);
                Point2D d = new Point2D(p2.getX(), p2.getY() - n/4);
                count += 1;
                display(a, b, depth - 1, root, count);
                display(c, d, depth - 1, root, count);
            }
        }
    }
    
}
